[{"title":"缺陷管理流程","url":"http://UnaEyre.coding.me/2016/12/21/缺陷管理流程/","content":"<h1 id=\"缺陷管理流程\"><a href=\"#缺陷管理流程\" class=\"headerlink\" title=\"缺陷管理流程\"></a>缺陷管理流程</h1><h3 id=\"软件缺陷的生命周期\"><a href=\"#软件缺陷的生命周期\" class=\"headerlink\" title=\"软件缺陷的生命周期\"></a>软件缺陷的生命周期</h3><p><img src=\"http://unaeyre.coding.me/store/images/bug-life-cycle.png\" alt=\"Bug生命周期\"></p>\n<h4 id=\"缺陷基本管理流程\"><a href=\"#缺陷基本管理流程\" class=\"headerlink\" title=\"缺陷基本管理流程\"></a>缺陷基本管理流程</h4><ul>\n<li>测试人员填写bug并提交，此时bug的状态为new</li>\n<li>开发负责人确定bug是否有效，是的话，bug的状态为open，并分配给开发人员，否的话，bug的状态为rejected</li>\n<li>开发人员修改bug，修改完成并进行<strong>单元测试</strong>后，bug的状态变为fixed，同时说明修改方法</li>\n<li>当bug的状态变为fixed时，测试人员打开该bug，开始对该bug进行回归测试，如果该bug回归测试通过，则状态变为closed。否则bug的状态变为reopen，同时说明reopen、closed状态变化的原因或者操作过程</li>\n<li>如果回归测试通过，可是修改的同时又引入新的bug，则重新提交bug，状态为open，开发人员修改bug，省略了开发负责人的确认，因为既然是回归测试说明之前已经确定是bug了</li>\n</ul>\n"},{"title":"软件测试流程","url":"http://UnaEyre.coding.me/2016/12/20/软件测试流程/","content":"<h1 id=\"软件测试流程\"><a href=\"#软件测试流程\" class=\"headerlink\" title=\"软件测试流程\"></a>软件测试流程</h1><h3 id=\"软件测试基本流程图\"><a href=\"#软件测试基本流程图\" class=\"headerlink\" title=\"软件测试基本流程图\"></a>软件测试基本流程图</h3><p><img src=\"http://unaeyre.coding.me/store/images/testing-flow.png\" alt=\"软件测试流程图\"></p>\n<ul>\n<li><strong>需求分析和讨论</strong> </li>\n</ul>\n<pre>\n<table cellspacing=\"0\">\n    <tr>\n        <th>软件开发岗位</th>\n        <th>工作职责</th>\n    </tr>\n    <tr>\n        <td>部门经理</td>\n        <td>组织产品需求分析，确保产品符合市场需要，最终的决策者。</td>\n    </tr><tr>\n    </tr><tr>\n        <td>产品经理 </td>\n        <td>需求讲解和分析，记录需求分析过程中发现的问题。</td>\n    </tr><tr>\n    </tr><tr>\n        <td>开发经理，软件开发工程师 </td>\n        <td>讨论需求实现的可行性和技术难点，给出合理建议，分析软件开发过程中可能遇到的风险。</td>\n    </tr><tr>\n    </tr><tr>\n        <td>测试经理，软件测试工程师 </td>\n        <td>讨论需求实现的可行性和测试点，给出合理建议，分析软件开发过程中可能遇到的风险。</td>\n    </tr><tr>\n</tr></table>\n</pre>\n\n<p>工作成果：<em>测试大纲</em></p>\n<ul>\n<li><strong>编写测试计划</strong></li>\n</ul>\n<pre>\n<table cellspacing=\"0\">\n    <tr>\n        <th>软件开发岗位</th>\n        <th>工作职责</th>\n    </tr>\n    <tr>\n        <td>部门经理</td>\n        <td>确认测试计划内容和时间点的可行性，最终的决策者。</td>\n    </tr><tr>\n    </tr><tr>\n        <td>开发经理</td>\n        <td>确认测试计划各个时间点的可行性，给出合理建议。</td>\n    </tr><tr>\n    </tr><tr>\n        <td>测试经理</td>\n        <td>测试计划制定者，确认测试策略、测试资源、测试进度、测试风险等关键内容，形成测试计划。</td>\n    </tr><tr>\n    </tr><tr>\n        <td>软件测试工程师 </td>\n        <td>参与讨论测试策略、测试资源、测试进度、测试风险等关键内容，协助测试经理完成测试计划。</td>\n    </tr><tr>\n</tr></table>\n</pre>\n\n<p>工作成果：<em>测试计划</em></p>\n<ul>\n<li><strong>测试设计</strong></li>\n</ul>\n<pre>\n<table cellspacing=\"0\">\n    <tr>\n        <th>软件开发岗位</th>\n        <th>工作职责</th>\n    </tr>\n    <tr>\n        <td>部门经理，产品经理，开发经理</td>\n        <td>参与测试设计评审，给出合理建议。</td>\n    </tr><tr>\n    </tr><tr>\n        <td>测试经理</td>\n        <td>确定测试设计方向，监控执行速度，协调测试资源，评审测试设计并给出合理修改建议，测试设计终结者。</td>\n    </tr><tr>\n    </tr><tr>\n        <td>软件测试工程师 </td>\n        <td>根据测试大纲，将输入输出数据、操作或各种环境设计以及期望结果的一个特定的集合，形成测试规范。</td>\n    </tr><tr>\n</tr></table>\n</pre>\n\n<p>工作成果：<em>测试用例</em></p>\n<ul>\n<li><strong>测试执行</strong></li>\n</ul>\n<pre>\n<table cellspacing=\"0\">\n    <tr>\n        <th>软件开发岗位</th>\n        <th>工作职责</th>\n    </tr>\n    <tr>\n        <td>测试经理</td>\n        <td>确定测试策略，监控执行速度，协调测试资源，测试执行，缺陷确认及分配。</td>\n    </tr><tr>\n    </tr><tr>\n        <td>软件测试工程师 </td>\n        <td>执行软件项目测试，发现程序中缺陷，保证产品质量达到规定要求。</td>\n    </tr><tr>\n</tr></table>\n</pre>\n\n<p>工作成果：<em>测试列表</em></p>\n<ul>\n<li><strong>缺陷管理</strong></li>\n</ul>\n<pre>\n<table cellspacing=\"0\">\n    <tr>\n        <th>软件开发岗位</th>\n        <th>工作职责</th>\n    </tr>\n    <tr>\n        <td> 产品经理</td>\n        <td>判断争议缺陷，最终的决策者。</td>\n    </tr><tr>\n    </tr><tr>\n        <td>开发经理</td>\n        <td>控制开发进度和质量，确认及修改缺陷，处理疑难缺陷。</td>\n    </tr><tr>\n    </tr><tr>\n        <td> 软件开发工程师</td>\n        <td> 缺陷确认及修改。</td>\n    </tr><tr>\n    </tr><tr>\n        <td>测试经理</td>\n        <td>控制测试进度和质量，确认及修改缺陷，处理疑难缺陷和争议缺陷。</td>\n    </tr><tr>\n    </tr><tr>\n        <td>软件测试工程师 </td>\n        <td>提交和分析缺陷，在开发人员修改缺陷后，进行缺陷复审和关闭。</td>\n    </tr><tr>\n</tr></table>\n</pre>\n\n<p>工作成果：<em>缺陷统计表</em></p>\n<ul>\n<li><strong>测试报告</strong></li>\n</ul>\n<pre>\n<table cellspacing=\"0\">\n    <tr>\n        <th>软件开发岗位</th>\n        <th>工作职责</th>\n    </tr>\n    <tr>\n        <td>测试经理</td>\n        <td>分析测试计划进度执行情况、缺陷的统计和分析、测试结论和下阶段工作建议，形成测试总结报告。</td>\n    </tr><tr>\n    </tr><tr>\n        <td>软件测试工程师 </td>\n        <td>参与讨论缺陷的统计和分析、测试结论和下阶段工作建议，协助测试经理完成测试计划。</td>\n    </tr><tr>\n</tr></table>\n</pre>\n\n<p>工作成果：<em>测试总结报告</em></p>\n"},{"title":"同时在GitHub和Coding上搭建Hexo","url":"http://UnaEyre.coding.me/2016/11/22/同时在Github和Coding上搭建Hexo/","content":"<h1 id=\"同时在GitHub和Coding上搭建Hexo博客\"><a href=\"#同时在GitHub和Coding上搭建Hexo博客\" class=\"headerlink\" title=\"同时在GitHub和Coding上搭建Hexo博客\"></a>同时在GitHub和Coding上搭建Hexo博客</h1><blockquote>\n<p>之前写了一篇<a href=\"http://unaeyre.coding.me/2016/11/20/在Coding上搭建Hexo博客/\">在Coding上搭建Hexo博客</a>，现在来写同时在GitHub和Coding上搭建Hexo博客。</p>\n</blockquote>\n<h3 id=\"在GitHub上搭建Hexo博客跟在Coding上差不多，但还是有点细微差别。这里主要介绍下区别，详细的参考在Coding上搭建Hexo博客\"><a href=\"#在GitHub上搭建Hexo博客跟在Coding上差不多，但还是有点细微差别。这里主要介绍下区别，详细的参考在Coding上搭建Hexo博客\" class=\"headerlink\" title=\"在GitHub上搭建Hexo博客跟在Coding上差不多，但还是有点细微差别。这里主要介绍下区别，详细的参考在Coding上搭建Hexo博客\"></a>在GitHub上搭建Hexo博客跟在Coding上差不多，但还是有点细微差别。这里主要介绍下区别，详细的参考<a href=\"http://unaeyre.coding.me/2016/11/20/在Coding上搭建Hexo博客/\">在Coding上搭建Hexo博客</a></h3><ul>\n<li><p>在GitHub上创建名为username.github.io的仓库(repository)，username就是你的用户名，仓库名要按照这种形式，这是固定格式。</p>\n</li>\n<li><p>创建好仓库之后修改_config.yml里面的配置</p>\n<pre><code>deploy:     \n     type: git\n     repo: git@github.com:username/username.github.io.git\n     branch: master\n</code></pre></li>\n<li><p>执行下面命令，遇到问题可以到<a href=\"http://unaeyre.coding.me/2016/11/20/在Coding上搭建Hexo博客/\">在Coding上搭建Hexo博客</a>里面找</p>\n<pre><code>hexo g\n hexo d\n</code></pre></li>\n<li><p>在GitHub上搭建Hexo就好啦，打开 https : // username.github.io /就可以访问自己的博客啦~</p>\n</li>\n<li><p>现在分别在GitHub和Coding上搭建好博客了，要想同时搭建，只需要修改_config.yml里面的配置</p>\n<pre><code>deploy:     \n -  type: git\n    repo: git@github.com:username/username.github.io.git\n    branch: master        \n -  type: git\n    repo: git@git.coding.net:username/username.git\n    branch: master\n</code></pre></li>\n<li><p>注意前面的符号-和一个空格，不要漏了，我自己就因为漏了导致折腾了半天~~~</p>\n</li>\n</ul>\n<blockquote>\n<p>写下来才觉得很简单，可是在搭建过程中真的是踩了好多坑，因为换了另一个账号重新完整再搭一遍，导致切换的时候有些配置没改，比如.ssh里的~</p>\n<p>对啦，有时候步骤全对了可就是没成功，也不一定就是自己方法错了，最后希望各位小伙伴都能搭好属于自己的博客~</p>\n</blockquote>\n"},{"title":"在Coding上搭建Hexo博客","url":"http://UnaEyre.coding.me/2016/11/20/在Coding上搭建Hexo博客/","content":"<h1 id=\"在Coding上搭建Hexo静态博客\"><a href=\"#在Coding上搭建Hexo静态博客\" class=\"headerlink\" title=\"在Coding上搭建Hexo静态博客\"></a>在Coding上搭建Hexo静态博客</h1><blockquote>\n<p>简单易懂，新手也能快速上手搭建一个属于自己的静态博客。</p>\n<p>因为自己在搭建过程中踩了很多坑，正好写下这篇博客记录自己的心得，也分享给其他需要的人。</p>\n<p>搭建方法千千万，但整体过程是差不多的，这里只介绍我自己的搭建过程，正式在coding上成功搭了三遍才写下这篇博客的，废话说了那么多，现在开始进入正题吧！</p>\n</blockquote>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li>安装git</li>\n<li>安装node.js</li>\n<li>注册coding账号并绑定邮箱(自己就因为没绑定邮箱出错了~)</li>\n</ul>\n<h3 id=\"Hexo的安装和使用\"><a href=\"#Hexo的安装和使用\" class=\"headerlink\" title=\"Hexo的安装和使用\"></a>Hexo的安装和使用</h3><ul>\n<li><p>全局安装hexo和hexo的运行环境</p>\n<p>  npm install hexo</p>\n<p>  npm install hexo-cli</p>\n<p>  我也看到过直接执行 npm install hexo-cli命令，两种我都试过，具体区别也没研究，我们也没必要省一句代码，两句都执行就好了。</p>\n</li>\n<li><p>初始化项目名</p>\n<p>  项目名可以任意，这里以blog作为例子</p>\n<p>  hexo blog</p>\n</li>\n<li><p>运行Hexo</p>\n<p>  cd blog</p>\n<p>  hexo server(可以简写成hexo s)</p>\n<p>  在本地查看<a href=\"http://localhost:4000就可以浏览到Hexo的默认主题了，到这里本地搭建就成功了。\" target=\"_blank\" rel=\"external\">http://localhost:4000就可以浏览到Hexo的默认主题了，到这里本地搭建就成功了。</a></p>\n</li>\n</ul>\n<h3 id=\"部署到Coding\"><a href=\"#部署到Coding\" class=\"headerlink\" title=\"部署到Coding\"></a>部署到Coding</h3><ul>\n<li><p>在coding上新建一个与用户名同名的项目，注意项目名必须跟用户名一模一样，然后开启pages服务，分支默认名为coding-pages，可以修改也可以不改，这里我将它改成master。</p>\n</li>\n<li><p>本地生成ssh证书</p>\n<p>  执行ssh-keygen -t rsa -C username@example.com (你自己注册coding的邮箱地址)</p>\n<p>  把生成的公钥(~/.ssh/id_rsa.pub)里的内容全部拷贝到coding个人账户下的ssh公钥里</p>\n</li>\n<li><p>在hexo生成的blog(这个blog就是前面初始化的项目名)里找到_config.yml文件打开翻到最下面加上deploy配置</p>\n<p>  deploy: </p>\n<p>  &nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;&nbsp;git</p>\n<p>  &nbsp;&nbsp;&nbsp;&nbsp;repo:&nbsp;&nbsp;git@git.coding.net:username/username.git</p>\n<p>  &nbsp;&nbsp;&nbsp;&nbsp;branch:&nbsp;&nbsp;master</p>\n<p>  注意格式type：后面有一个空格，要严格按照格式，下面的也类似，每行开头也要空两格。</p>\n</li>\n<li><p>生成静态文件并发布到coding</p>\n<p>  执行hexo generate(也可以简写成hexo g)</p>\n<p>  hexo deploy(也可以简写成hexo d)</p>\n<p>  在执行hexo deploy报错说找不到git命令时，执行 npm install hexo-deployer-git –<br>  save再次执行hexo deploy就行啦。</p>\n<p>  访问<a href=\"http://username.coding.me就可以看到自己部署的博客啦。\" target=\"_blank\" rel=\"external\">http://username.coding.me就可以看到自己部署的博客啦。</a></p>\n</li>\n</ul>\n<blockquote>\n<p>最后再说两句自己踩的坑，因为自己有两个coding账号并且之前一个全局设置了user.name和user.email导致提交代码出错~所以各位小伙伴要避免这种小错误啦~如果你按照我说的并没有搭建成功，出错了记得google，我也是这样一步步来的，因为其中还牵涉到一些环境变量的配置，我自己搭建的时候就碰到有配置环境变量成功也有没配置也成功的。写下来发现就这么点，可对于新手来说自己折腾也是要一点时间的，希望大家都能成功搭建自己的博客~</p>\n</blockquote>\n"},{"title":"about","url":"http://UnaEyre.coding.me/about/index.html","content":""},{"title":"link","url":"http://UnaEyre.coding.me/link/index.html","content":""},{"title":"category","url":"http://UnaEyre.coding.me/category/index.html","content":""},{"title":"search","url":"http://UnaEyre.coding.me/search/index.html","content":""},{"title":"tag","url":"http://UnaEyre.coding.me/tag/index.html","content":""}]